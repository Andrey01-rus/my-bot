from flask import Flask
from threading import Thread

app = Flask(__name__)

@app.route('/')
def home():
    return "ü§ñ –ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω!"

Thread(target=lambda: app.run(host='0.0.0.0', port=8080)).start()
import json
import random
import requests
import os
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    ContextTypes,
    ConversationHandler,
    MessageHandler,
    filters
)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π
AI_CHAT = 1

# –ó–∞–≥—Ä—É–∑–∫–∞ –∏–¥–µ–π
with open('ideas.json', 'r', encoding='utf-8') as f:
    ideas = json.load(f)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TOKEN = os.environ["TOKEN"]
OPENROUTER_KEY = os.environ["OPENROUTER_KEY"]
MODEL = "nvidia/llama-3.3-nemotron-super-49b-v1:free"  # DeepSeek-R1

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def main_keyboard():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üé≤ –ò–¥–µ—è", callback_data='idea'),
         InlineKeyboardButton("üìç –ú–µ—Å—Ç–æ", callback_data='place')],
        [InlineKeyboardButton("üïπ –ò–≥—Ä–∞", callback_data='game'),
         InlineKeyboardButton("ü§ñ –ò–ò-—á–∞—Ç", callback_data='ai_chat')]
    ])

def ai_chat_keyboard():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("‚ùå –í—ã–π—Ç–∏ –∏–∑ –ò–ò-—á–∞—Ç–∞", callback_data='exit_ai')]
    ])

# –ò–ò-—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π
async def ask_ai(prompt):
    try:
        messages = [
            {
                "role": "system", 
                "content": "–û—Ç–≤–µ—á–∞–π —Å—Ä–∞–∑—É –±–µ–∑ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏–π. –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π –ø–æ–º–µ—Ç–∫–∏ –≤—Ä–æ–¥–µ 'Thought Process' –∏–ª–∏ 'Step-by-Step explanation'."
            },
            {
                "role": "user",
                "content": f"{prompt}\n\n–û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –∏—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –±–µ–∑ –æ–±—ä—è—Å–Ω–µ–Ω–∏–π."
            }
        ]

        headers = {
            "Authorization": f"Bearer {OPENROUTER_KEY}",
            "HTTP-Referer": "https://github.com/AntiSkukaBot",
            "X-Title": "AntiSkukaBot AI"
        }

        response = requests.post(
            "https://openrouter.ai/api/v1/chat/completions",
            headers=headers,
            json={
                "model": MODEL,
                "messages": messages,
                "temperature": 1.0  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç—å
            },
            timeout=20
        )

        answer = response.json()['choices'][0]['message']['content']

        # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞
        filters = [
            "**Answer:**",
            "Thought Process:", 
            "Step-by-Step Explanation:",
            "–ü–æ—à–∞–≥–æ–≤–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ:"
        ]

        for f in filters:
            if f in answer:
                answer = answer.split(f, 1)[-1].strip()

        return answer.strip('*').strip()

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ò–ò: {e}")
        return "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –∏–Ω–∞—á–µ"

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üöÄ –ü—Ä–∏–≤–µ—Ç! –Ø —É–º–Ω—ã–π –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫:\n"
        "- –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∏–¥–µ–π\n"
        "- –ü–æ–∏—Å–∫ –º–µ—Å—Ç\n"
        "- –ò–≥—Ä—ã\n"
        "- –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –ò–ò-—á–∞—Ç",
        reply_markup=main_keyboard()
    )
    return ConversationHandler.END

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == 'ai_chat':
        await query.edit_message_text(
            "üí¨ –í—ã –≤ —Ä–µ–∂–∏–º–µ –ò–ò-—á–∞—Ç–∞. –ú–æ–∂–µ—Ç–µ:\n"
            "- –ó–∞–¥–∞–≤–∞—Ç—å —Å–ª–æ–∂–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã\n"
            "- –ü—Ä–æ—Å–∏—Ç—å —Å–æ–≤–µ—Ç—ã\n"
            "- –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–µ –∏–¥–µ–∏\n\n"
            "–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –∑–∞–ø—Ä–æ—Å!",
            reply_markup=ai_chat_keyboard()
        )
        return AI_CHAT

    try:
        if query.data in ['idea', 'place', 'game']:
            category_map = {
                'idea': 'activities',
                'place': 'places',
                'game': 'games'
            }
            response = random.choice(ideas[category_map[query.data]])
            await query.edit_message_text(
                text=f"üéØ {response}",
                reply_markup=main_keyboard()
            )

    except Exception as e:
        await query.edit_message_text("üòï –û—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –≤–∞—Ä–∏–∞–Ω—Ç", reply_markup=main_keyboard())

    return ConversationHandler.END

async def ai_chat_mode(update: Update, context: ContextTypes.DEFAULT_TYPE):
    prompt = update.message.text
    answer = await ask_ai(prompt)
    await update.message.reply_text(
        f"ü§ñ {answer}",
        reply_markup=ai_chat_keyboard()
    )
    return AI_CHAT

async def exit_ai_chat(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    await query.edit_message_text(
        "‚úÖ –í—ã –≤—ã—à–ª–∏ –∏–∑ –ò–ò-—á–∞—Ç–∞",
        reply_markup=main_keyboard()
    )
    return ConversationHandler.END

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ ConversationHandler
conv_handler = ConversationHandler(
    entry_points=[CallbackQueryHandler(button_handler, pattern='^ai_chat$')],
    states={
        AI_CHAT: [
            MessageHandler(filters.TEXT & ~filters.COMMAND, ai_chat_mode),
            CallbackQueryHandler(exit_ai_chat, pattern='^exit_ai$')
        ]
    },
    fallbacks=[
        CommandHandler('start', start),
        CallbackQueryHandler(exit_ai_chat, pattern='^exit_ai$')
    ],
    map_to_parent={ConversationHandler.END: ConversationHandler.END}
)

# –ó–∞–ø—É—Å–∫
if __name__ == '__main__':
    app = Application.builder().token(TOKEN).build()
    app.add_handler(CommandHandler('start', start))
    app.add_handler(conv_handler)
    app.add_handler(CallbackQueryHandler(button_handler))
    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    app.run_polling()