from flask import Flask
from threading import Thread
import json
import random
import requests
import os
import vk_api
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    ContextTypes,
    ConversationHandler,
    MessageHandler,
    filters
)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Flask
app = Flask(__name__)

@app.route('/')
def home():
    return "ü§ñ –ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω!"

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
AI_CHAT = 1
VK_TOKEN = os.getenv("VK_TOKEN")  # –¢–æ–∫–µ–Ω VK API
SAFE_PUBLICS = [-97216585, -34317336, -34017843]  # –ë–µ–∑–æ–ø–∞—Å–Ω—ã–µ –ø–∞–±–ª–∏–∫–∏: @video, @tnt, @lentach

# –ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å VK
class VKMemes:
    def __init__(self):
        self.vk = vk_api.VkApi(token=VK_TOKEN)
        
    def get_memes(self, count=5):
        """–ü–æ–ª—É—á–∞–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ –º–µ–º—ã –∏–∑ VK"""
        memes = []
        for public_id in SAFE_PUBLICS:
            try:
                posts = self.vk.method("wall.get", {
                    "owner_id": public_id,
                    "count": 20,
                    "filter": "owner"
                })["items"]
                
                for post in posts:
                    if len(memes) >= count:
                        break
                    if "attachments" in post:
                        for attach in post["attachments"]:
                            if attach["type"] == "photo":
                                photo = attach["photo"]
                                url = max(photo["sizes"], key=lambda x: x["height"])["url"]
                                memes.append({
                                    "type": "photo",
                                    "url": url,
                                    "source": f"https://vk.com/wall{post['owner_id']}_{post['id']}"
                                })
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ VK: {e}")
        return memes[:count]

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞—Ä—Å–µ—Ä–∞ VK
vk_parser = VKMemes() if VK_TOKEN else None

# –ó–∞–≥—Ä—É–∑–∫–∞ –∏–¥–µ–π
with open('ideas.json', 'r', encoding='utf-8') as f:
    ideas = json.load(f)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–æ—Ç–∞
TOKEN = os.getenv("TELEGRAM_TOKEN")
OPENROUTER_KEY = os.getenv("OPENROUTER_KEY")
MODEL = "nvidia/llama-3.3-nemotron-super-49b-v1:free"

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def main_keyboard():
    buttons = [
        [InlineKeyboardButton("üé≤ –ò–¥–µ—è", callback_data='idea'),
         InlineKeyboardButton("üìç –ú–µ—Å—Ç–æ", callback_data='place')],
        [InlineKeyboardButton("üïπ –ò–≥—Ä–∞", callback_data='game'),
         InlineKeyboardButton("ü§ñ –ò–ò-—á–∞—Ç", callback_data='ai_chat')]
    ]
    if vk_parser:
        buttons.append([InlineKeyboardButton("üñº –ú–µ–º—ã –∏–∑ VK (5 —à—Ç)", callback_data='vk_memes')])
    return InlineKeyboardMarkup(buttons)

def ai_chat_keyboard():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("‚ùå –í—ã–π—Ç–∏ –∏–∑ –ò–ò-—á–∞—Ç–∞", callback_data='exit_ai')]
    ])

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üöÄ –ü—Ä–∏–≤–µ—Ç! –Ø —É–º–Ω—ã–π –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫:\n"
        "- –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∏–¥–µ–π\n"
        "- –ü–æ–∏—Å–∫ –º–µ—Å—Ç\n"
        "- –ò–≥—Ä—ã\n"
        "- –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –ò–ò-—á–∞—Ç" + 
        ("\n- –°–≤–µ–∂–∏–µ –º–µ–º—ã –∏–∑ VK" if vk_parser else ""),
        reply_markup=main_keyboard()
    )
    return ConversationHandler.END

async def send_vk_memes(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    if not vk_parser:
        await query.edit_message_text("‚ö†Ô∏è –§—É–Ω–∫—Ü–∏—è –º–µ–º–æ–≤ –æ—Ç–∫–ª—é—á–µ–Ω–∞", reply_markup=main_keyboard())
        return
    
    try:
        memes = vk_parser.get_memes()
        if not memes:
            await query.edit_message_text("üòî –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–µ–º—ã", reply_markup=main_keyboard())
            return
            
        for meme in memes:
            if meme["type"] == "photo":
                await query.message.reply_photo(
                    photo=meme["url"],
                    caption=f"–ò—Å—Ç–æ—á–Ω–∏–∫: {meme['source']}"
                )
                
        await query.message.reply_text(
            "–í–æ—Ç —Å–≤–µ–∂–∏–µ –º–µ–º—ã! –ß—Ç–æ –µ—â–µ —Ö–æ—Ç–∏—Ç–µ?",
            reply_markup=main_keyboard()
        )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ–º–æ–≤: {e}")
        await query.edit_message_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ–º–æ–≤", reply_markup=main_keyboard())

# ... (–æ—Å—Ç–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ ConversationHandler
conv_handler = ConversationHandler(
    entry_points=[CallbackQueryHandler(button_handler, pattern='^ai_chat$')],
    states={
        AI_CHAT: [
            MessageHandler(filters.TEXT & ~filters.COMMAND, ai_chat_mode),
            CallbackQueryHandler(exit_ai_chat, pattern='^exit_ai$')
        ]
    },
    fallbacks=[
        CommandHandler('start', start),
        CallbackQueryHandler(exit_ai_chat, pattern='^exit_ai$')
    ],
    map_to_parent={ConversationHandler.END: ConversationHandler.END}
)

def run_flask():
    app.run(host='0.0.0.0', port=8080)

if __name__ == '__main__':
    # –ó–∞–ø—É—Å–∫–∞–µ–º Flask –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    flask_thread = Thread(target=run_flask)
    flask_thread.daemon = True
    flask_thread.start()

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
    bot_app = Application.builder().token(TOKEN).build()
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    bot_app.add_handler(CommandHandler('start', start))
    bot_app.add_handler(conv_handler)
    bot_app.add_handler(CallbackQueryHandler(button_handler))
    bot_app.add_handler(CallbackQueryHandler(send_vk_memes, pattern='^vk_memes$'))
    
    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    bot_app.run_polling(drop_pending_updates=True)
