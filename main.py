import os
import json
import random
import requests
import socket
import sys
import asyncio
from datetime import datetime
from threading import Thread
from flask import Flask
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    ContextTypes,
    ConversationHandler,
    MessageHandler,
    filters
)

# --- –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ ---
try:
    lock_socket = socket.socket(socket.AF_UNIX, socket.SOCK_DGRAM)
    lock_socket.bind('\0' + 'antiskuka_bot_lock')
except socket.error:
    print("‚ö†Ô∏è –ë–æ—Ç —É–∂–µ –∑–∞–ø—É—â–µ–Ω! –ó–∞–≤–µ—Ä—à–∞—é –ø—Ä–æ—Ü–µ—Å—Å.")
    sys.exit(1)

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Flask ---
app = Flask(__name__)

@app.route('/')
def home():
    return "ü§ñ –ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç!"

# --- –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã ---
AI_CHAT = 1
REDDIT_SUBREDDITS = ["memes", "dankmemes", "Pikabu"]
MEME_CACHE = {"memes": [], "last_update": None}

# --- –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö ---
with open('ideas.json', 'r', encoding='utf-8') as f:
    ideas = json.load(f)

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ---
TOKEN = os.getenv("TELEGRAM_TOKEN")
OPENROUTER_KEY = os.getenv("OPENROUTER_KEY")
MODEL = "nvidia/llama-3.3-nemotron-super-49b-v1:free"

# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ---
def main_keyboard():
    buttons = [
        [InlineKeyboardButton("üé≤ –ò–¥–µ—è", callback_data='idea'),
         InlineKeyboardButton("üìç –ú–µ—Å—Ç–æ", callback_data='place')],
        [InlineKeyboardButton("üïπ –ò–≥—Ä–∞", callback_data='game'),
         InlineKeyboardButton("ü§ñ –ò–ò-—á–∞—Ç", callback_data='ai_chat')],
        [InlineKeyboardButton("üñº –°–ª—É—á–∞–π–Ω—ã–π –º–µ–º", callback_data='get_meme')]
    ]
    return InlineKeyboardMarkup(buttons)

def ai_chat_keyboard():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("‚ùå –í—ã–π—Ç–∏ –∏–∑ –ò–ò-—á–∞—Ç–∞", callback_data='exit_ai')]
    ])

def meme_keyboard():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üé≤ –ï—â—ë –º–µ–º", callback_data='more_memes')],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back')]
    ])

# --- –§—É–Ω–∫—Ü–∏–∏ –º–µ–º–æ–≤ ---
async def fetch_reddit_memes():
    """–ü–æ–ª—É—á–∞–µ–º –º–µ–º—ã —Å Reddit —á–µ—Ä–µ–∑ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π API"""
    global MEME_CACHE
    
    if MEME_CACHE["last_update"] and (datetime.now() - MEME_CACHE["last_update"]).seconds < 7200:
        return MEME_CACHE["memes"]
    
    new_memes = []
    for subreddit in REDDIT_SUBREDDITS:
        try:
            url = f"https://www.reddit.com/r/{subreddit}/hot.json?limit=15"
            headers = {"User-Agent": "TelegramBot/1.0"}
            
            response = requests.get(url, headers=headers, timeout=15)
            response.raise_for_status()
            
            data = response.json()
            for post in data["data"]["children"]:
                if post["data"].get("post_hint") == "image":
                    new_memes.append({
                        "url": post["data"]["url"],
                        "source": f"https://reddit.com{post['data']['permalink']}",
                        "title": post["data"]["title"]
                    })
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–µ–º–æ–≤ —Å r/{subreddit}: {str(e)[:100]}...")
    
    MEME_CACHE = {
        "memes": new_memes[:20],
        "last_update": datetime.now()
    }
    return MEME_CACHE["memes"]

async def send_random_meme(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –º–µ–º–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    query = update.callback_query
    await query.answer()
    
    try:
        memes = await fetch_reddit_memes()
        if not memes:
            raise Exception("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–µ–º–æ–≤")
        
        meme = random.choice(memes)
        await context.bot.send_photo(
            chat_id=query.message.chat_id,
            photo=meme["url"],
            caption=f"<b>{meme['title']}</b>\n\nüîó {meme['source']}",
            reply_markup=meme_keyboard(),
            parse_mode="HTML"
        )
        await query.message.delete()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –º–µ–º–∞: {e}")
        await query.edit_message_text(
            "üò¢ –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–µ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ!",
            reply_markup=main_keyboard()
        )

# --- –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞ ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üöÄ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –Ø –±–æ—Ç —Å —Ñ—É–Ω–∫—Ü–∏—è–º–∏:\n"
        "- –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∏–¥–µ–π\n- –ü–æ–∏—Å–∫ –º–µ—Å—Ç\n- –ú–∏–Ω–∏-–∏–≥—Ä—ã\n"
        "- –£–º–Ω—ã–π –ò–ò-—á–∞—Ç\n- –°–≤–µ–∂–∏–µ –º–µ–º—ã —Å Reddit",
        reply_markup=main_keyboard()
    )
    return ConversationHandler.END

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == 'ai_chat':
        await query.edit_message_text(
            "üí¨ –†–µ–∂–∏–º –ò–ò-—á–∞—Ç–∞. –ó–∞–¥–∞–π—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å:",
            reply_markup=ai_chat_keyboard()
        )
        return AI_CHAT

    if query.data in ['idea', 'place', 'game']:
        response = random.choice(ideas[{
            'idea': 'activities',
            'place': 'places',
            'game': 'games'
        }[query.data]])
        await query.edit_message_text(f"üéØ {response}", reply_markup=main_keyboard())
    
    if query.data == 'back':
        await query.edit_message_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_keyboard())
    
    return ConversationHandler.END

async def ai_chat_mode(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        answer = await ask_ai(update.message.text)
        await update.message.reply_text(f"ü§ñ {answer}", reply_markup=ai_chat_keyboard())
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ò–ò: {e}")
        await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞", reply_markup=ai_chat_keyboard())
    return AI_CHAT

async def exit_ai_chat(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    await query.edit_message_text("‚úÖ –í—ã –≤—ã—à–ª–∏ –∏–∑ –ò–ò-—á–∞—Ç–∞", reply_markup=main_keyboard())
    return ConversationHandler.END

async def ask_ai(prompt):
    """–£–ª—É—á—à–µ–Ω–Ω—ã–π –ò–ò-—á–∞—Ç —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    try:
        headers = {
            "Authorization": f"Bearer {OPENROUTER_KEY}",
            "HTTP-Referer": "https://github.com/AntiSkukaBot",
            "X-Title": "AntiSkukaBot AI"
        }
        
        response = requests.post(
            "https://openrouter.ai/api/v1/chat/completions",
            headers=headers,
            json={
                "model": MODEL,
                "messages": [{"role": "user", "content": prompt}],
                "temperature": 0.7
            },
            timeout=20
        )
        response.raise_for_status()
        return response.json()['choices'][0]['message']['content']
    except Exception as e:
        raise Exception(f"–û—à–∏–±–∫–∞ API: {str(e)[:200]}")

# --- –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ---
def run_flask():
    app.run(host='0.0.0.0', port=8080)

async def post_init(application: Application) -> None:
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏"""
    print("‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

def main() -> None:
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    # –ó–∞–ø—É—Å–∫ Flask
    Thread(target=run_flask, daemon=True).start()

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
    application = Application.builder().token(TOKEN).post_init(post_init).build()

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler('start', start))
    
    conv_handler = ConversationHandler(
        entry_points=[CallbackQueryHandler(button_handler, pattern='^ai_chat$')],
        states={
            AI_CHAT: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, ai_chat_mode),
                CallbackQueryHandler(exit_ai_chat, pattern='^exit_ai$')
            ]
        },
        fallbacks=[CommandHandler('start', start)]
    )
    
    application.add_handler(conv_handler)
    application.add_handler(CallbackQueryHandler(button_handler))
    application.add_handler(CallbackQueryHandler(send_random_meme, pattern='^(get_meme|more_memes)$'))

    # –ó–∞–ø—É—Å–∫
    print("üü¢ –ó–∞–ø—É—Å–∫–∞—é –±–æ—Ç–∞ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏:")
    print(f"- –ú–æ–¥–µ–ª—å: {MODEL}")
    print(f"- –°–∞–±—Ä–µ–¥–¥–∏—Ç—ã: {', '.join(REDDIT_SUBREDDITS)}")
    
    application.run_polling(
        drop_pending_updates=True,
        close_loop=False,
        stop_signals=[]
    )

if __name__ == '__main__':
    main()
