from flask import Flask
from threading import Thread
import json
import random
import requests
import os
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, InputMediaPhoto
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    ContextTypes,
    ConversationHandler,
    MessageHandler,
    filters
)
import feedparser
from datetime import datetime

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Flask
app = Flask(__name__)

@app.route('/')
def home():
    return "ü§ñ –ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω!"

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
AI_CHAT = 1
MEME_CHANNELS = [
    "https://rsshub.app/telegram/channel/mudakoff",  # –ú–µ–º—ã
    "https://rsshub.app/telegram/channel/typical_mem",  # –¢–∏–ø–∏—á–Ω—ã–µ –º–µ–º—ã
    "https://rsshub.app/telegram/channel/mem_s_mestami"  # –ú–µ–º—ã —Å –º–µ—Å—Ç–∞–º–∏
]

# –ó–∞–≥—Ä—É–∑–∫–∞ –∏–¥–µ–π
with open('ideas.json', 'r', encoding='utf-8') as f:
    ideas = json.load(f)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–æ—Ç–∞
TOKEN = os.getenv("TELEGRAM_TOKEN")
OPENROUTER_KEY = os.getenv("OPENROUTER_KEY")
MODEL = "nvidia/llama-3.3-nemotron-super-49b-v1:free"

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def main_keyboard():
    buttons = [
        [InlineKeyboardButton("üé≤ –ò–¥–µ—è", callback_data='idea'),
         InlineKeyboardButton("üìç –ú–µ—Å—Ç–æ", callback_data='place')],
        [InlineKeyboardButton("üïπ –ò–≥—Ä–∞", callback_data='game'),
         InlineKeyboardButton("ü§ñ –ò–ò-—á–∞—Ç", callback_data='ai_chat')],
        [InlineKeyboardButton("üñº –°–≤–µ–∂–∏–µ –º–µ–º—ã (5 —à—Ç)", callback_data='tg_memes')]
    ]
    return InlineKeyboardMarkup(buttons)

def ai_chat_keyboard():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("‚ùå –í—ã–π—Ç–∏ –∏–∑ –ò–ò-—á–∞—Ç–∞", callback_data='exit_ai')]
    ])

# –ò–ò-—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª (–≤–∞—à –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∫–æ–¥)
async def ask_ai(prompt):
    try:
        messages = [
            {"role": "system", "content": "–û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É."},
            {"role": "user", "content": prompt}
        ]
        
        headers = {
            "Authorization": f"Bearer {OPENROUTER_KEY}",
            "HTTP-Referer": "https://github.com/AntiSkukaBot",
            "X-Title": "AntiSkukaBot AI"
        }

        response = requests.post(
            "https://openrouter.ai/api/v1/chat/completions",
            headers=headers,
            json={
                "model": MODEL,
                "messages": messages,
                "temperature": 1.0
            },
            timeout=20
        )

        return response.json()['choices'][0]['message']['content']
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ò–ò: {e}")
        return "‚ö†Ô∏è –û—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ"

# –ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ–º–æ–≤ —á–µ—Ä–µ–∑ RSS
async def get_telegram_memes():
    memes = []
    for channel in MEME_CHANNELS:
        try:
            feed = feedparser.parse(channel)
            for entry in feed.entries[:3]:  # –ë–µ—Ä–µ–º –ø–æ 3 –º–µ–º–∞ —Å –∫–∞–∂–¥–æ–≥–æ –∫–∞–Ω–∞–ª–∞
                if hasattr(entry, 'media_content'):
                    memes.append({
                        'url': entry.media_content[0]['url'],
                        'source': entry.link
                    })
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ {channel}: {e}")
    return memes[:5]  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–µ –±–æ–ª–µ–µ 5 –º–µ–º–æ–≤

# –û—Ç–ø—Ä–∞–≤–∫–∞ –º–µ–º–æ–≤
async def send_telegram_memes(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    try:
        memes = await get_telegram_memes()
        
        if not memes:
            await query.edit_message_text("üòî –ú–µ–º—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ!", reply_markup=main_keyboard())
            return
            
        for meme in memes:
            try:
                await query.message.reply_photo(
                    photo=meme['url'],
                    caption=f"–ò—Å—Ç–æ—á–Ω–∏–∫: {meme['source']}"
                )
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ–º–∞: {e}")
                
        await query.message.reply_text(
            "–ß—Ç–æ –µ—â–µ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?",
            reply_markup=main_keyboard()
        )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞: {e}")
        await query.edit_message_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ–º–æ–≤", reply_markup=main_keyboard())

# –û—Å—Ç–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üöÄ –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç —Å –º–µ–º–∞–º–∏ –∏ –Ω–µ —Ç–æ–ª—å–∫–æ:",
        reply_markup=main_keyboard()
    )
    return ConversationHandler.END

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == 'ai_chat':
        await query.edit_message_text(
            "üí¨ –†–µ–∂–∏–º –ò–ò-—á–∞—Ç–∞. –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –≤–æ–ø—Ä–æ—Å!",
            reply_markup=ai_chat_keyboard()
        )
        return AI_CHAT

    if query.data in ['idea', 'place', 'game']:
        category_map = {
            'idea': 'activities',
            'place': 'places',
            'game': 'games'
        }
        response = random.choice(ideas[category_map[query.data]])
        await query.edit_message_text(
            text=f"üéØ {response}",
            reply_markup=main_keyboard()
        )
    return ConversationHandler.END

async def ai_chat_mode(update: Update, context: ContextTypes.DEFAULT_TYPE):
    answer = await ask_ai(update.message.text)
    await update.message.reply_text(
        f"ü§ñ {answer}",
        reply_markup=ai_chat_keyboard()
    )
    return AI_CHAT

async def exit_ai_chat(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    await query.edit_message_text(
        "‚úÖ –í—ã –≤—ã—à–ª–∏ –∏–∑ –ò–ò-—á–∞—Ç–∞",
        reply_markup=main_keyboard()
    )
    return ConversationHandler.END

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ ConversationHandler
conv_handler = ConversationHandler(
    entry_points=[CallbackQueryHandler(button_handler, pattern='^ai_chat$')],
    states={
        AI_CHAT: [
            MessageHandler(filters.TEXT & ~filters.COMMAND, ai_chat_mode),
            CallbackQueryHandler(exit_ai_chat, pattern='^exit_ai$')
        ]
    },
    fallbacks=[
        CommandHandler('start', start),
        CallbackQueryHandler(exit_ai_chat, pattern='^exit_ai$')
    ]
)

def run_flask():
    app.run(host='0.0.0.0', port=8080)

if __name__ == '__main__':
    # –ó–∞–ø—É—Å–∫–∞–µ–º Flask –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    flask_thread = Thread(target=run_flask)
    flask_thread.daemon = True
    flask_thread.start()

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
    bot_app = Application.builder().token(TOKEN).build()
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    bot_app.add_handler(CommandHandler('start', start))
    bot_app.add_handler(conv_handler)
    bot_app.add_handler(CallbackQueryHandler(button_handler))
    bot_app.add_handler(CallbackQueryHandler(send_telegram_memes, pattern='^tg_memes$'))
    
    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    bot_app.run_polling(drop_pending_updates=True)
