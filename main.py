import os
import json
import random
import logging
import socket
import sys
from datetime import datetime
from threading import Thread
from flask import Flask
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    ContextTypes,
    ConversationHandler,
    MessageHandler,
    filters
)

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤ ---
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# --- –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ ---
try:
    lock_socket = socket.socket(socket.AF_UNIX, socket.SOCK_DGRAM)
    lock_socket.bind('\0' + 'antiskuka_bot_lock')
except socket.error:
    logger.error("–ë–æ—Ç —É–∂–µ –∑–∞–ø—É—â–µ–Ω! –ó–∞–≤–µ—Ä—à–∞—é –ø—Ä–æ—Ü–µ—Å—Å.")
    sys.exit(1)

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Flask ---
app = Flask(__name__)

@app.route('/')
def home():
    return "ü§ñ –ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω!"

# --- –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã ---
AI_CHAT = 1
MEME_SOURCES = [
    # –û—Ç–∫—Ä—ã—Ç—ã–µ API –º–µ–º–æ–≤
    "https://meme-api.com/gimme",
    # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏
    "https://api.imgflip.com/get_memes",
    # –†–µ–∑–µ—Ä–≤–Ω—ã–µ URL –º–µ–º–æ–≤
    "https://i.imgur.com/example1.jpg",
    "https://i.imgur.com/example2.jpg"
]

# --- –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö ---
try:
    with open('ideas.json', 'r', encoding='utf-8') as f:
        ideas = json.load(f)
except Exception as e:
    logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ ideas.json: {e}")
    ideas = {
        "activities": ["–ò–¥–µ—è 1", "–ò–¥–µ—è 2"],
        "places": ["–ú–µ—Å—Ç–æ 1", "–ú–µ—Å—Ç–æ 2"],
        "games": ["–ò–≥—Ä–∞ 1", "–ò–≥—Ä–∞ 2"]
    }

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ---
TOKEN = os.getenv("TELEGRAM_TOKEN")
if not TOKEN:
    logger.error("–¢–æ–∫–µ–Ω Telegram –Ω–µ –Ω–∞–π–¥–µ–Ω!")
    sys.exit(1)

# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ---
def main_keyboard():
    buttons = [
        [InlineKeyboardButton("üé≤ –ò–¥–µ—è", callback_data='idea'),
         InlineKeyboardButton("üìç –ú–µ—Å—Ç–æ", callback_data='place')],
        [InlineKeyboardButton("üïπ –ò–≥—Ä–∞", callback_data='game'),
         InlineKeyboardButton("ü§ñ –ò–ò-—á–∞—Ç", callback_data='ai_chat')],
        [InlineKeyboardButton("üñº –°–ª—É—á–∞–π–Ω—ã–π –º–µ–º", callback_data='get_meme')]
    ]
    return InlineKeyboardMarkup(buttons)

def ai_chat_keyboard():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("‚ùå –í—ã–π—Ç–∏ –∏–∑ –ò–ò-—á–∞—Ç–∞", callback_data='exit_ai')]
    ])

def meme_keyboard():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üé≤ –ï—â—ë –º–µ–º", callback_data='more_memes')],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back')]
    ])

# --- –§—É–Ω–∫—Ü–∏–∏ –º–µ–º–æ–≤ ---
async def get_random_meme():
    """–ü–æ–ª—É—á–∞–µ–º –º–µ–º –∏–∑ —Å–ª—É—á–∞–π–Ω–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞"""
    try:
        # –ü—Ä–æ–±—É–µ–º –æ—Ç–∫—Ä—ã—Ç—ã–µ API
        response = requests.get(MEME_SOURCES[0], timeout=10)
        if response.status_code == 200:
            data = response.json()
            return {
                "url": data["url"],
                "source": data["postLink"]
            }
    except Exception as e:
        logger.warning(f"API –º–µ–º–æ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ: {e}")

    # –ï—Å–ª–∏ API –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–æ, –±–µ—Ä–µ–º –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö URL
    return {
        "url": random.choice(MEME_SOURCES[2:]),
        "source": "–ê—Ä—Ö–∏–≤ –º–µ–º–æ–≤"
    }

async def send_random_meme(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –º–µ–º–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    query = update.callback_query
    await query.answer()
    
    try:
        meme = await get_random_meme()
        await context.bot.send_photo(
            chat_id=query.message.chat_id,
            photo=meme["url"],
            caption=f"üîó {meme['source']}",
            reply_markup=meme_keyboard()
        )
        await query.message.delete()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ–º–∞: {e}")
        await query.edit_message_text(
            "üò¢ –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–µ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ!",
            reply_markup=main_keyboard()
        )

# --- –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞ ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üöÄ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –Ø –±–æ—Ç —Å —Ñ—É–Ω–∫—Ü–∏—è–º–∏:\n"
        "- –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∏–¥–µ–π\n- –ü–æ–∏—Å–∫ –º–µ—Å—Ç\n- –ú–∏–Ω–∏-–∏–≥—Ä—ã\n"
        "- –°–ª—É—á–∞–π–Ω—ã–µ –º–µ–º—ã",
        reply_markup=main_keyboard()
    )
    return ConversationHandler.END

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == 'ai_chat':
        await query.edit_message_text(
            "üí¨ –†–µ–∂–∏–º –ò–ò-—á–∞—Ç–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω",
            reply_markup=main_keyboard()
        )
        return ConversationHandler.END

    if query.data in ['idea', 'place', 'game']:
        response = random.choice(ideas[{
            'idea': 'activities',
            'place': 'places',
            'game': 'games'
        }[query.data]])
        await query.edit_message_text(f"üéØ {response}", reply_markup=main_keyboard())
    
    if query.data == 'back':
        await query.edit_message_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_keyboard())
    
    return ConversationHandler.END

# --- –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ---
def run_flask():
    app.run(host='0.0.0.0', port=8080)

def main() -> None:
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    # –ó–∞–ø—É—Å–∫ Flask
    Thread(target=run_flask, daemon=True).start()

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
    application = Application.builder().token(TOKEN).build()

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler('start', start))
    application.add_handler(CallbackQueryHandler(button_handler))
    application.add_handler(CallbackQueryHandler(send_random_meme, pattern='^(get_meme|more_memes)$'))

    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    application.drop_pending_updates = True

    # –ó–∞–ø—É—Å–∫
    logger.info("üü¢ –ó–∞–ø—É—Å–∫–∞—é –±–æ—Ç–∞...")
    application.run_polling()

if __name__ == '__main__':
    main()
    import requests
response = requests.get(url, timeout=10)  # –ú–∞–∫—Å 10 —Å–µ–∫—É–Ω–¥ –Ω–∞ –∑–∞–ø—Ä–æ—Å
