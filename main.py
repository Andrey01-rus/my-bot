import os
import json
import random
import logging
import requests
from datetime import datetime
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ChatAction
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    ContextTypes,
    ConversationHandler,
    MessageHandler,
    filters
)

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤ ---
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# --- –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã ---
AI_CHAT = 1
IMGUR_API_URL = "https://api.imgur.com/3/gallery/search/top/week?q=meme"
DEFAULT_MEMES = [
    "https://i.imgur.com/8J7nD7B.jpg",
    "https://i.imgur.com/5Z4w1Qq.jpg",
    "https://i.imgur.com/3JQ2X9Y.jpg"
]

# --- –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ ---
MEME_CACHE = []
LAST_CACHE_UPDATE = None

# --- –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö ---
with open('ideas.json', 'r', encoding='utf-8') as f:
    ideas = json.load(f)

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ---
TOKEN = os.getenv("TELEGRAM_TOKEN")
OPENROUTER_KEY = os.getenv("OPENROUTER_KEY")
MODEL = "nvidia/llama-3.3-nemotron-super-49b-v1:free"

# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ---
def main_keyboard():
    buttons = [
        [InlineKeyboardButton("üé≤ –ò–¥–µ—è", callback_data='idea'),
         InlineKeyboardButton("üìç –ú–µ—Å—Ç–æ", callback_data='place')],
        [InlineKeyboardButton("üïπ –ò–≥—Ä–∞", callback_data='game'),
         InlineKeyboardButton("ü§ñ –ò–ò-—á–∞—Ç", callback_data='ai_chat')],
        [InlineKeyboardButton("üñº –°–ª—É—á–∞–π–Ω—ã–π –º–µ–º", callback_data='get_meme')]
    ]
    return InlineKeyboardMarkup(buttons)

def ai_chat_keyboard():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("‚ùå –í—ã–π—Ç–∏ –∏–∑ –ò–ò-—á–∞—Ç–∞", callback_data='exit_ai')]
    ])

def meme_keyboard():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üé≤ –ï—â—ë –º–µ–º", callback_data='more_memes')],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back')]
    ])

# --- –§—É–Ω–∫—Ü–∏–∏ –º–µ–º–æ–≤ ---
async def update_meme_cache():
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–µ—à–∞ –º–µ–º–æ–≤"""
    global MEME_CACHE, LAST_CACHE_UPDATE
    try:
        headers = {'Authorization': 'Client-ID 546c25a59c58ad7'}
        response = requests.get(IMGUR_API_URL, headers=headers, timeout=10)
        response.raise_for_status()
        
        MEME_CACHE = []
        for item in response.json()['data']:
            if 'images' in item and not item.get('nsfw', True):
                for image in item['images']:
                    if image['type'].startswith('image/'):
                        MEME_CACHE.append({
                            "url": image['link'],
                            "source": f"https://imgur.com/gallery/{item['id']}",
                            "title": item['title'] if 'title' in item else "–ú–µ–º —Å Imgur"
                        })
        LAST_CACHE_UPDATE = datetime.now()
        return MEME_CACHE[:50]
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ Imgur API: {e}")
        return []

async def get_fresh_memes():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–≤–µ–∂–∏—Ö –º–µ–º–æ–≤ —Å –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    global MEME_CACHE, LAST_CACHE_UPDATE
    
    if not MEME_CACHE or (datetime.now() - LAST_CACHE_UPDATE).total_seconds() > 3600:
        await update_meme_cache()
    
    return MEME_CACHE or [{
        "url": url,
        "source": "–†–µ–∑–µ—Ä–≤–Ω—ã–π –º–µ–º",
        "title": "–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π –º–µ–º"
    } for url in DEFAULT_MEMES]

async def send_random_meme(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –º–µ–º–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    query = update.callback_query
    try:
        # –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ callback
        await query.answer()
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑—Ä–∞—Å—Ç–∞ –∑–∞–ø—Ä–æ—Å–∞
        if (datetime.now() - query.message.date).total_seconds() > 60:
            await query.edit_message_text("‚ö†Ô∏è –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å—Ç–∞—Ä–µ–ª–æ. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É —Å–Ω–æ–≤–∞.")
            return

        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏
        await context.bot.send_chat_action(
            chat_id=query.message.chat_id, 
            action=ChatAction.UPLOAD_PHOTO
        )
        
        memes = await get_fresh_memes()
        meme = random.choice(memes)
        
        await context.bot.send_photo(
            chat_id=query.message.chat_id,
            photo=meme["url"],
            caption=f"<b>{meme['title']}</b>\n\nüîó {meme['source']}",
            reply_markup=meme_keyboard(),
            parse_mode="HTML"
        )
        await query.message.delete()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ–º–∞: {e}")
        await query.edit_message_text(
            "üò¢ –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–µ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ!",
            reply_markup=main_keyboard()
        )

# --- –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞ ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üöÄ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –Ø –±–æ—Ç —Å —Ñ—É–Ω–∫—Ü–∏—è–º–∏:\n"
        "- –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∏–¥–µ–π\n- –ü–æ–∏—Å–∫ –º–µ—Å—Ç\n- –ú–∏–Ω–∏-–∏–≥—Ä—ã\n"
        "- –£–º–Ω—ã–π –ò–ò-—á–∞—Ç\n- –°–≤–µ–∂–∏–µ –º–µ–º—ã",
        reply_markup=main_keyboard()
    )
    return ConversationHandler.END

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    try:
        # –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ callback
        await query.answer()
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑—Ä–∞—Å—Ç–∞ –∑–∞–ø—Ä–æ—Å–∞
        if (datetime.now() - query.message.date).total_seconds() > 60:
            await query.edit_message_text("‚ö†Ô∏è –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å—Ç–∞—Ä–µ–ª–æ. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É —Å–Ω–æ–≤–∞.")
            return ConversationHandler.END

        if query.data == 'ai_chat':
            await query.edit_message_text(
                "üí¨ –†–µ–∂–∏–º –ò–ò-—á–∞—Ç–∞. –ó–∞–¥–∞–π—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å:",
                reply_markup=ai_chat_keyboard()
            )
            return AI_CHAT

        if query.data in ['idea', 'place', 'game']:
            response = random.choice(ideas[{
                'idea': 'activities',
                'place': 'places',
                'game': 'games'
            }[query.data]])
            await query.edit_message_text(f"üéØ {response}", reply_markup=main_keyboard())
        
        if query.data == 'back':
            await query.edit_message_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_keyboard())
        
        return ConversationHandler.END
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ button_handler: {e}")
        await query.edit_message_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return ConversationHandler.END

async def ai_chat_mode(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        await context.bot.send_chat_action(
            chat_id=update.message.chat_id,
            action=ChatAction.TYPING
        )
        
        answer = await ask_ai(update.message.text)
        await update.message.reply_text(f"ü§ñ {answer}", reply_markup=ai_chat_keyboard())
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ò–ò: {e}")
        await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞", reply_markup=ai_chat_keyboard())
    return AI_CHAT

async def exit_ai_chat(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    await query.edit_message_text("‚úÖ –í—ã –≤—ã—à–ª–∏ –∏–∑ –ò–ò-—á–∞—Ç–∞", reply_markup=main_keyboard())
    return ConversationHandler.END

async def ask_ai(prompt):
    """–§—É–Ω–∫—Ü–∏—è –ò–ò-—á–∞—Ç–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π —Ç–∞–π–º–∞—É—Ç–æ–≤"""
    try:
        headers = {
            "Authorization": f"Bearer {OPENROUTER_KEY}",
            "HTTP-Referer": "https://github.com/AntiSkukaBot",
            "X-Title": "AntiSkukaBot AI"
        }
        
        response = requests.post(
            "https://openrouter.ai/api/v1/chat/completions",
            headers=headers,
            json={
                "model": MODEL,
                "messages": [{"role": "user", "content": prompt}],
                "temperature": 0.7
            },
            timeout=15  # –£–º–µ–Ω—å—à–µ–Ω–Ω—ã–π —Ç–∞–π–º–∞—É—Ç
        )
        response.raise_for_status()
        return response.json()['choices'][0]['message']['content']
    except requests.exceptions.Timeout:
        return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ò–ò –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª –≤–æ–≤—Ä–µ–º—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
    except Exception as e:
        raise Exception(f"–û—à–∏–±–∫–∞ API: {str(e)[:200]}")

# --- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ---
def main():
    application = Application.builder().token(TOKEN).build()

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    application.add_handler(CommandHandler('start', start))
    
    conv_handler = ConversationHandler(
        entry_points=[CallbackQueryHandler(button_handler, pattern='^ai_chat$')],
        states={
            AI_CHAT: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, ai_chat_mode),
                CallbackQueryHandler(exit_ai_chat, pattern='^exit_ai$')
            ]
        },
        fallbacks=[CommandHandler('start', start)]
    )
    
    application.add_handler(conv_handler)
    application.add_handler(CallbackQueryHandler(button_handler))
    application.add_handler(CallbackQueryHandler(send_random_meme, pattern='^(get_meme|more_memes)$'))

    logger.info("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!")
    
    try:
        application.run_polling(
            drop_pending_updates=True,
            poll_interval=0.5,
            timeout=20,
            read_timeout=20,
            connect_timeout=20
        )
    except NetworkError as e:
        logger.error(f"Network error: {e}")
        # –õ–æ–≥–∏–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    except Exception as e:
        logger.error(f"Critical error: {e}")

if __name__ == '__main__':
    main()
